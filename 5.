Write a function to convert a number from base 2 to base 10. To convert a number from base
2 to base 10, we first find the weight of each bit in the binary number. The weight of each bit
in the binary number is assigned from right to left. The weight of the rightmost bit is 0. The
weight of the bit immediately to the left of the rightmost bit is 1, the weight of the bit
immediately to the left of it is 2, and so on. Consider the binary number 1001101. The weight
of each bit is as follows:

weight 6 5 4 3 2 1 0
1 0 0 1 1 0 1

We use the weight of each bit to find the equivalent decimal number. For each bit, we
multiply the bit by 2 to the power of its weight, and then we add all of the numbers. For the
binary number 1001101, the equivalent decimal number is

To write a program that converts a binary number into the equivalent decimal number, we
note two things:
- The weight of each bit in the binary number must be known, and
- the weight is assigned from right to left.
Because we do not know in advance how many bits are in the binary number, we must
process the bits from right to left. After processing a bit, we can add 1 to its weight, giving
the weight of the bit immediately to its left. Also, each bit must be extracted from the binary
number and multiplied by 2 to the power of its weight. To extract a bit, you can use the mod
operator. Write a program that uses a stack to convert a binary number into an equivalent
decimal number and test your function for the following values: 11000101, 10101010,
11111111, 10000000, 1111100000.


ANSWER
#include <iostream>
#include <stack>
#include <cmath>

int binaryToDecimal(const std::string& binaryNumber) {
    std::stack<int> binaryStack;

    for (char bit : binaryNumber) {
        if (bit == '0' || bit == '1') {
            int binaryDigit = bit - '0';
            binaryStack.push(binaryDigit);
        } else {
            std::cerr << "Invalid binary digit encountered: " << bit << std::endl;
            return -1; // Return -1 for invalid input
        }
    }

    int decimalNumber = 0;
    int weight = 0;

    while (!binaryStack.empty()) {
        decimalNumber += binaryStack.top() * static_cast<int>(pow(2, weight));
        binaryStack.pop();
        weight++;
    }

    return decimalNumber;
}

int main() {
    // Test the program with the given binary numbers
    std::string binaryNumbers[] = {"11000101", "10101010", "11111111", "10000000", "1111100000"};

    for (const auto& binaryNumber : binaryNumbers) {
        int decimalResult = binaryToDecimal(binaryNumber);

        if (decimalResult != -1) {
            std::cout << "Binary: " << binaryNumber << " -> Decimal: " << decimalResult << std::endl;
        } else {
            std::cerr << "Conversion failed for binary number: " << binaryNumber << std::endl;
        }
    }

    return 0;
}
